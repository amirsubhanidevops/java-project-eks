@Library('my-shared-library') _

pipeline {

    agent any

    parameters{
        choice(name:'action', choices: 'create\ndelete', description: 'choose create/Destroy')
        string(name: 'aws_acc_id', description:"name of the aws account id", defaultValue: '793555027847')
        string(name: 'region', description:"region of the ECR", defaultValue: 'us-east-1')
        string(name: 'ecr_name_repo', description:"name of the ECR repo", defaultValue: 'amirsubhani')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }

    environment{

        ACCESS_KEY = credentials('ACCESS-KEY')
        SECRET_KEY = credentials('SECRET-KEY')
    }

    stages{

        stage('Git checkout'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/amirsubhanidevops/java-project-eks.git"
                    )
                }
            }

        }

        stage('Unit test : Maven'){
          when{expression {params.action == 'create'}}

            steps{
                script{

                    unitTest()
                }
            }

        }

        stage('Integration test : Maven'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    integrationTest()
                }
            }

        }

        stage('Static code analysis : Sonar'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    def SonarqubecredentialsId = 'sonarqube-api'
                    staticCodeAnalysis(SonarqubecredentialsId)

                }
            }

        }

        stage('Code Quality gate status check : Sonarqube'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                def SonarqubecredentialsId = 'sonarqube-api'
                staticCodeAnalysis(SonarqubecredentialsId)
                }
            }

        }

        stage('MVN Build: Maven'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    mavenBuild()
                }
            }
     
           
        }  

        stage('Docker Image Build: ECR '){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    dockerBuild("${params.aws_acc_id}","${params.region}","${params.ecr_name_repo}")
                }
            }

        }

        stage('Docker Image Scan: Trivy'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    dockerimageScan("${params.aws_acc_id}","${params.region}","${params.ecr_name_repo}")
                }
            }

        }

        stage('Docker Image push: ECR'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    dockerPush("${params.aws_acc_id}","${params.region}","${params.ecr_name_repo}")
                }
            }

        }

        stage('Docker Image Cleanup'){
          when{expression {params.action == 'create'}}
            steps{
                script{

                    dockerImageCleanup("${params.aws_acc_id}","${params.region}","${params.ecr_name_repo}")
                }
            }
        
        
        }

        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            steps{
                script{

                    dir('eks_module') {
                      sh """
                          terraform init 
                          terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' --var-file=./config/terraform.tfvars
                          terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' --var-file=./config/terraform.tfvars --auto-approve
                      """
                  }
                }
            }
        }

        stage('Connect to EKS '){
            when { expression {  params.action == 'create' } }
            steps{

                script{

                sh """
                aws configure set aws_access_key_id "$ACCESS_KEY"
                aws configure set aws_secret_access_key "$SECRET_KEY"
                aws configure set region "${params.region}"
                aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                """
                }
            }
        } 

        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                  
                  def apply = false

                  try{
                    input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                    apply = true
                  }catch(err){
                    apply= false
                    currentBuild.result  = 'UNSTABLE'
                  }
                  if(apply){

                    sh """
                      kubectl apply -f deployment.yaml 
                    """
                  }
                }
            }
        }



    }
    
}